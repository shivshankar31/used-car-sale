6: Step 1: 
virtual env

to enable virtual enambe 
    export WORKON_HOME=$HOME/.virtualenvs
    export PROJECT_HOME=$HOME/Devel
    source /usr/local/bin/virtualenvwrapper.sh

mkvirtualenv carzoneenv
python3 -m pip install Django

7: Step 2: create sample hello world

8: step 3: create git repo
    Git Enable:
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M master
    git remote add origin https://github.com/shivshankar31/used-car-sale.git
    git push -u origin master
    Add gitignore file, generate from https://www.toptal.com/developers/gitignore, add all media folders and files

9: step 4: Home and static file 
step 4.1: create static folder in the base project folder and move all static files 
step 4.2: In settings.py, add below commands to add static folder to django.
    STATIC_URL = 'static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'carzoneproj/static'),
]
step 4.3: run the command  "python3 manage.py collectstatic", so django will automatically create static folder and save in root folder.
TIPS: python3 manage.py --help - will show all avaliable commands
step 4.4: wrap all src into {%static ' ' %}, which includes files in js, img, fonts. for some of the images we will be adding to database insted of static folder.

10: step 5: add base html file
step 5.1: create a base html file and copy main header and all js files 

11,12,13: step 6: create base,footer,nav, about,services,contact
step 6.1: create include folder in templates and create base,footer,nav html files
step 6.2: call all above created files in base html file
step 6.3: create about, services and contact html page and copy the code from the theam.
step 6.4: user {% extends 'base.html' %} also {% load static %} in all the above created files
step 6.5: fix all bits and pices 

15: step 7: install and create postgres DB
step 7.1: install postgres and pgadmin4 using balow commands 
https://unix.stackexchange.com/questions/467873/how-to-install-pgadmin-4-on-linux-mint
    $ sudo mkdir /var/lib/pgadmin
    $ sudo mkdir /var/log/pgadmin
    $ sudo chown $USER /var/lib/pgadmin
    $ sudo chown $USER /var/log/pgadmin
    $ python3 -m venv pgadmin4
    $ source pgadmin4/bin/activate
    (pgadmin4) $ pip install pgadmin4
    (pgadmin4) $ pgadmin4

    Desktop version installation command - we have used second method
    curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
    sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/focal/ pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
    sudo apt install pgadmin4


step 7.2: create superuser and set password 
    use the below link to learn more to create user and set role
    https://www.youtube.com/watch?v=-LwI4HMR_Eg
    sudo su - postgres
    psql
    CREATE USER 'username' WITH PASSWORD 'pw';

step 7.3: setting.py change the DB settings
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'carzone_DB',
    'USER' : 'postgres',
    'PASSWORD' : '1234',
    'HOST' : '127.0.0.1',

16: step 8: create superuser 
step 8.1: makemigrations and migrate
step 8.2: create superuser for admin panel

17: step 9: create model and config admin panel
step 9.1: in models.py, create team model
step 9.2: In admin.py, display the created team model

18: step 10: Media file config
step 10.1: In settings.py, add below code
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
step 10.2: in url.py, add below code
    static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)

17,18,19,20: step 11: Teams model
in this step we aill display all the team members in home and about page, also configure admin panel

step 11.1: in views.py, create a dict to retrive the team data from database
     empl = {
        'teams' : team
    }
step 11.2: in home.html, to convert team members dynamic remove all extra code and keey one and use for loop.
    {% for emp in teams %}

    {% endfor %}
step 11.3: same for about page.

step 11.4: in admin.py, 
    list_display - to display the fields
    search_fields - to search 
    list_filter - to filter fields 
    thumbnail function is used to disply the photo in admin pannel

step 11.5: In models.py, redefine save() whenever we upload photo of different size it converts to 300x300 size 
    from PIL import Image
    from tkinter import Image
    def save(self):
            super().save()  # saving image first

            img = Image.open(self.photo.path) # Open image using self

            if (img.height > 300 or img.width > 300) or (img.height < 300 or img.width < 300):
                new_img = (300, 300)
                img.thumbnail(new_img)
                img.save(self.photo.path)  # saving image at the same path

22, 23: step12: nav bar style, read more button config
step 12.1: dynamicly change footer copy rights year.
    {% now 'Y'%} - Y for complete year(2022), y for 22 alown
step 12.2: home page get in touch update href with below 
    {% url 'contact' %}
step 12.3: menu bar current page highlater
    {% if 'contact' in request.path %}
    class= "nav-link active"
    {% else %}
    class = "nav-link"
    {% endif %}
step 13.4: add services page to read more

24: step 13: Cars app 
step 13.1: create cars app
    python3 manage.py startapp cars
step 13.2: add to installed app in settings.py
    'cars.page.CarsConfig',
step 13.3: add url to main app urls.py
    path('cars/', include ('cars.urls')),
step 13.4: In views.py create cars function
    def cars(request):
        return render (request, 'cars/cars.html')
step 13.5: create cars.html file under templet\cars folder
step 13.6: create urls.py under created app and add the patten
    urlpatterns = [
    path('',views.cars, name='cars'),
    ]
now test the page.

25,26: step 14: cars page content, nav bar, logo fix
step 14.1: In cars.html, (% load static %}, {% extend 'base.html'%} and {%block content %}
step 14.2: inside block add the cars html code
step 14.3: fix nav bare style 
    {% if 'contact' in request.path %}
    class= "nav-link active"
    {% else %}
    class = "nav-link"
    {% endif %}
step 14.4: logo fix by adding '../' front of all logo src in app.js


27, 28: step 15: Car Model and admin panel
step 15.1: create car class with below fields,
    car_title, cyty, state, color, model, year, condition, price, description, car_photo, car_photo_1,
    car_photo_2, car_photo_3, car_photo_4, car_photo_5, features, body_style, engine, transmission, interior
    miles, doors, passengers, vin_no, millage, fuel_type, no_of_owners, is_featured, created_date
step 15.2: use choice tuple to create choises.
step 15.3: configure admin pannel, in admin.py